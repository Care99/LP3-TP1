Introduction
GNU/Linux has taken the world of computers by storm. At one time, personal com-
puter users were forced to choose among proprietary operating environments and
applications. Users had no way of fixing or improving these programs, could not look
“under the hood,” and were often forced to accept restrictive licenses. GNU/Linux
and other open source systems have changed that—now PC users, administrators, and
developers can choose a free operating environment complete with tools, applications,
and full source code.
A great deal of the success of GNU/Linux is owed to its open source nature.
Because the source code for programs is publicly available, everyone can take part in
development, whether by fixing a small bug or by developing and distributing a com-
plete major application.This opportunity has enticed thousands of capable developers
worldwide to contribute new components and improvements to GNU/Linux, to the
point that modern GNU/Linux systems rival the features of any proprietary system,
and distributions include thousands of programs and applications spanning many CD-
ROMs or DVDs.
The success of GNU/Linux has also validated much of the UNIX philosophy.
Many of the application programming interfaces (APIs) introduced in AT&T and BSD
UNIX variants survive in Linux and form the foundation on which programs are
built.The UNIX philosophy of many small command line-oriented programs working
together is the organizational principle that makes GNU/Linux so powerful. Even
when these programs are wrapped in easy-to-use graphical user interfaces, the under-
lying commands are still available for power users and automated scripts.
A powerful GNU/Linux application harnesses the power of these APIs and com-
mands in its inner workings. GNU/Linux’s APIs provide access to sophisticated fea-
tures such as interprocess communication, multithreading, and high-performance
networking. And many problems can be solved simply by assembling existing com-
mands and programs using simple scripts.
